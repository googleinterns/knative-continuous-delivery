// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/googleinterns/knative-continuous-delivery/pkg/apis/delivery/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyStateLister helps list PolicyStates.
type PolicyStateLister interface {
	// List lists all PolicyStates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyState, err error)
	// PolicyStates returns an object that can list and get PolicyStates.
	PolicyStates(namespace string) PolicyStateNamespaceLister
	PolicyStateListerExpansion
}

// policyStateLister implements the PolicyStateLister interface.
type policyStateLister struct {
	indexer cache.Indexer
}

// NewPolicyStateLister returns a new PolicyStateLister.
func NewPolicyStateLister(indexer cache.Indexer) PolicyStateLister {
	return &policyStateLister{indexer: indexer}
}

// List lists all PolicyStates in the indexer.
func (s *policyStateLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyState, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyState))
	})
	return ret, err
}

// PolicyStates returns an object that can list and get PolicyStates.
func (s *policyStateLister) PolicyStates(namespace string) PolicyStateNamespaceLister {
	return policyStateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyStateNamespaceLister helps list and get PolicyStates.
type PolicyStateNamespaceLister interface {
	// List lists all PolicyStates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyState, err error)
	// Get retrieves the PolicyState from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PolicyState, error)
	PolicyStateNamespaceListerExpansion
}

// policyStateNamespaceLister implements the PolicyStateNamespaceLister
// interface.
type policyStateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyStates in the indexer for a given namespace.
func (s policyStateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyState, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyState))
	})
	return ret, err
}

// Get retrieves the PolicyState from the indexer for a given namespace and name.
func (s policyStateNamespaceLister) Get(name string) (*v1alpha1.PolicyState, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policystate"), name)
	}
	return obj.(*v1alpha1.PolicyState), nil
}
